/*
 *  cool.cup
 *              Parser definition for the COOL language.
 *
 */

import java_cup.runtime.*;

/* Stuff enclosed in {: :} is copied verbatim to the class containing
all parser actions.  All the extra variables/functions you want to use
in the semantic actions should go here.  Don't remove or modify anything
that was there initially.  */

action code {: 

    int curr_lineno() {
	    return ((CoolTokenLexer)parser.getScanner()).curr_lineno();
    }

    AbstractSymbol curr_filename() {
	    return ((CoolTokenLexer)parser.getScanner()).curr_filename();
    }
:} 

/************************************************************************/
/*                DONT CHANGE ANYTHING IN THIS SECTION                  */

parser code {:
    int omerrs = 0;

    public void syntax_error(Symbol cur_token) {
        int lineno = action_obj.curr_lineno();
	    String filename = action_obj.curr_filename().getString();
        System.err.print("\"" + filename + "\", line " + lineno + 
		         ": parse error at or near ");
        Utilities.printToken(cur_token);
	    omerrs++;
	    if (omerrs>50) {
	        System.err.println("More than 50 errors");
	        System.exit(1);
	    }
    }

    public void unrecovered_syntax_error(Symbol cur_token) { }
:}

/* Declare the terminals; a few have types for associated lexemes.  The
token ERROR is never used in the parser; thus, it is a parse error when
the lexer returns it.  */

terminal CLASS, ELSE, FI, IF, IN, INHERITS, LET, LET_STMT, LOOP, POOL, THEN, WHILE;
terminal CASE, ESAC, OF, DARROW, NEW, ISVOID;
terminal ASSIGN, NOT, LE, ERROR;
terminal PLUS, DIV, MINUS, MULT, EQ, LT, DOT, NEG, COMMA, SEMI, COLON;
terminal LPAREN, RPAREN, AT, LBRACE, RBRACE;
terminal AbstractSymbol STR_CONST, INT_CONST;
terminal Boolean BOOL_CONST;
terminal AbstractSymbol TYPEID, OBJECTID;

/*  DON'T CHANGE ANYTHING ABOVE THIS LINE, OR YOUR PARSER WONT WORK       */
/**************************************************************************/

   /* Complete the nonterminal list below, giving a type for the semantic
      value of each non terminal. (See the CUP documentation for details. */

nonterminal programc program;
nonterminal Classes class_list;
nonterminal class_c class;
nonterminal Features dummy_feature_list;
nonterminal Feature feature;
nonterminal Formals formal_list;
nonterminal Formal formal;

nonterminal Expression expression;
nonterminal Expression let_assign;
nonterminal Expressions expression_list_comma;
nonterminal Expressions expression_list_semi;

nonterminal Case branch;
nonterminal Cases branch_list;

/* Precedence declarations go here. */

precedence left EQ, LT, LE;
precedence left PLUS, MINUS;
precedence left MULT, DIV;
precedence left DOT, AT;
precedence nonassoc OBJECTID;

program	
	::= class_list:cl
	    {: RESULT = new programc(curr_lineno(), cl); :}
    ;

class_list
	/* single class */
	::= class:c
	    {: RESULT = (new Classes(curr_lineno())).appendElement(c); :}
	/* several classes */
	| class_list:cl class:c
	    {: RESULT = cl.appendElement(c); :}
	;

/* If no parent is specified, the class inherits from the Object class */
class
	::= CLASS TYPEID:n LBRACE dummy_feature_list:f RBRACE SEMI
	    {: RESULT = new class_c(curr_lineno(), n, 
		                   AbstractTable.idtable.addString("Object"), 
				   f, curr_filename()); :}
	| CLASS TYPEID:n INHERITS TYPEID:p LBRACE dummy_feature_list:f RBRACE SEMI
	    {: RESULT = new class_c(curr_lineno(), n, p, f, curr_filename()); :}
	| error SEMI
	;

/* Feature list may be empty, but no empty features in list. */
dummy_feature_list
	::= /* empty */
	    {: RESULT = new Features(curr_lineno()); :}
	| feature:f SEMI
		{: RESULT = new Features(curr_lineno()).appendElement(f); :}
	| dummy_feature_list:fl feature:f SEMI
		{: RESULT = fl.appendElement(f); :}
	;

feature
	/* attribute without initialization */
	::= OBJECTID:id COLON TYPEID:typ
		{: RESULT = new attr(curr_lineno(), id, typ, new no_expr(curr_lineno())); :}
	/* attribute with initialization */
	| OBJECTID:id COLON TYPEID:typ ASSIGN expression:expr
		{: RESULT = new attr(curr_lineno(), id, typ, expr); :}
	/* method */
	| OBJECTID:id LPAREN formal_list:fl RPAREN COLON TYPEID:typ LBRACE expression:expr RBRACE
		{: RESULT = new method(curr_lineno(), id, fl, typ, expr); :}
	;

formal_list
	::= /* empty */
		{: RESULT = new Formals(curr_lineno()); :}
	| formal:f
		{: RESULT = new Formals(curr_lineno()).appendElement(f); :}
	| formal_list:fl COMMA formal:f
		{: RESULT = fl.appendElement(f); :}
	;

formal
	::= OBJECTID:id COLON TYPEID:typ
		{: RESULT = new formalc(curr_lineno(), id, typ); :}
	| error
	;


/* expr1, expr2, expr3, ... exprn*/
expression_list_comma
	::= expression:expr
		{: RESULT = new Expressions(curr_lineno()).appendElement(expr); :}
	| expression_list_comma:elc COMMA expression:expr
		{: RESULT = elc.appendElement(expr); :}
	| /* empty */ {: RESULT = new Expressions(curr_lineno()); :}
	;


expression_list_semi
	::= expression:expr SEMI
		{: RESULT = new Expressions(curr_lineno()).appendElement(expr); :}
	| expression_list_semi:els expression:expr SEMI
		{: RESULT = els.appendElement(expr); :}
	;


let_assign
	::= OBJECTID:id COLON TYPEID:typ IN expression:expr
		{: RESULT = new let(curr_lineno(), id, typ, new no_expr(curr_lineno()), expr); :}
	| OBJECTID:id COLON TYPEID:typ ASSIGN expression:expr1 IN expression:expr2
		{: RESULT = new let(curr_lineno(), id, typ, expr1, expr2); :}
	| OBJECTID:id COLON TYPEID:typ COMMA let_assign:la
		{: RESULT = new let(curr_lineno(), id, typ, new no_expr(curr_lineno()), la); :}
	| OBJECTID:id COLON TYPEID:typ ASSIGN expression:expr1 COMMA let_assign:la
		{: RESULT = new let(curr_lineno(), id, typ, expr1, la); :}
	| error COMMA
	;


branch
	::= OBJECTID:id COLON TYPEID:typ DARROW expression:expr
		{: RESULT = new branch(curr_lineno(), id, typ, expr); :}
	| error
	;


branch_list
	::= branch:b SEMI
		{: RESULT = new Cases(curr_lineno()).appendElement(b); :}
	| branch_list:bl branch:b SEMI
		{: RESULT = bl.appendElement(b); :}
	;


expression
	::= OBJECTID:id ASSIGN expression:expr
		{: RESULT = new assign(curr_lineno(), id, expr); :}
	/* method dispatch */
	| expression:expr DOT OBJECTID:id LPAREN expression_list_comma:elc RPAREN
		{: RESULT = new dispatch(curr_lineno(), expr, id, elc); :}
	/* self dispatch */
	| OBJECTID:id LPAREN expression_list_comma:elc RPAREN
		{: RESULT = new dispatch(curr_lineno(), new object(curr_lineno(), AbstractTable.idtable.addString("self")), id, elc); :}
	/* static dispatch */
	| expression:expr AT TYPEID:typ DOT OBJECTID:id LPAREN expression_list_comma:elc RPAREN
		{: RESULT = new static_dispatch(curr_lineno(), expr, typ, id, elc); :}
	| IF expression:expr1 THEN expression:expr2 ELSE expression:expr3 FI
		{: RESULT = new cond(curr_lineno(), expr1, expr2, expr3); :}
	| WHILE expression:expr1 LOOP expression:expr2 POOL
		{: RESULT = new loop(curr_lineno(), expr1, expr2); :}
	| LBRACE expression_list_semi:els RBRACE
		{: RESULT = new block(curr_lineno(), els); :}
	| LET let_assign:la
		{: RESULT = la; :}
	| CASE expression:expr OF branch_list:bl ESAC
		{: RESULT = new typcase(curr_lineno(), expr, bl); :}
	| NEW TYPEID:typ 
		{: RESULT = new new_(curr_lineno(), typ); :}
	| ISVOID expression:expr
		{: RESULT = new isvoid(curr_lineno(), expr); :}
	| expression:expr1 PLUS expression:expr2
		{: RESULT = new plus(curr_lineno(), expr1, expr2); :}
	| expression:expr1 MINUS expression:expr2
		{: RESULT = new sub(curr_lineno(), expr1, expr2); :}
	| expression:expr1 MULT expression:expr2
		{: RESULT = new mul(curr_lineno(), expr1, expr2); :}
	| expression:expr1 DIV expression:expr2
		{: RESULT = new divide(curr_lineno(), expr1, expr2); :}
	| NEG expression:expr
		{: RESULT = new neg(curr_lineno(), expr); :}
	| expression:expr1 LT expression:expr2
		{: RESULT = new lt(curr_lineno(), expr1, expr2); :}
	| expression:expr1 EQ expression:expr2
		{: RESULT = new eq(curr_lineno(), expr1, expr2); :}
	| expression:expr1 LE expression:expr2
		{: RESULT = new leq(curr_lineno(), expr1, expr2); :}
	| NOT expression:expr
		{: RESULT = new comp(curr_lineno(), expr); :}
	| LPAREN expression:expr RPAREN
		{: RESULT = expr; :}
	| INT_CONST:ic
		{: RESULT = new int_const(curr_lineno(), ic); :}
	| BOOL_CONST:bc
		{: RESULT = new bool_const(curr_lineno(), bc); :}
	| STR_CONST:sc
		{: RESULT = new string_const(curr_lineno(), sc); :}
	| OBJECTID:id
		{: RESULT = new object(curr_lineno(), id); :}
	| error
	;











